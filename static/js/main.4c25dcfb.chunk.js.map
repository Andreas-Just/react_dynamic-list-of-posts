{"version":3,"sources":["components/getMessageDate.js","components/User.js","components/CommentItem.js","components/CommentList.js","components/Post.js","components/PostList.js","components/Search.tsx","helpers/debounce.js","api/getPosts.ts","App.tsx","index.tsx"],"names":["getMessageDate","days","date","Date","setDate","getDate","toLocaleString","year","month","day","User","id","cmtsId","name","email","address","Feed","className","Event","Content","Summary","aria-label","city","Meta","Like","Icon","min","max","Math","floor","random","generateNumber","CommentItem","body","Comment","Author","content","Metadata","Text","Action","CommentList","comments","Group","Header","as","dividing","map","comment","key","Post","title","user","highlightedText","highlightText","text","split","RegExp","part","i","toLowerCase","Segment","raised","color","Item","Image","size","src","photo","length","Description","Extra","PostList","list","highlightSearch","post","Search","setSearchQuery","debouncedSearch","f","delay","timer","clearTimeout","args","setTimeout","debounce","value","Input","placeholder","icon","onChange","event","target","slice","handleInputChange","API_URL","getData","url","a","fetch","response","json","getPosts","Promise","all","posts","users","find","userId","filter","postId","App","useState","setPosts","isLoaded","setLoaded","isLoading","setLoading","isError","setError","searchQuery","loadData","data","message","searchedPosts","includes","Container","Button","loading","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c25dcfb.chunk.js","sourcesContent":["export const getMessageDate = (days) => {\n  const date = new Date();\n  const options = { year: 'numeric', month: 'long', day: 'numeric' };\n\n  date.setDate(date.getDate() - days);\n\n  return date.toLocaleString('en-US', options);\n};\n","import React from 'react';\nimport { Feed, Icon } from 'semantic-ui-react';\nimport { getMessageDate } from './getMessageDate';\n\nconst generateNumber = (min = 0, max = 70) => Math.floor(\n  Math.random() * (max - min + 1) + min,\n);\n\nconst User = ({ id, cmtsId, name, email, address }) => (\n  <Feed className=\"user\">\n    <Feed.Event>\n      <Feed.Content>\n        <Feed.Summary className=\"user__summary\">\n          <Feed.User>{name}</Feed.User>\n          <Feed.Date>\n            {`added this post on ${getMessageDate(cmtsId + id)}`}\n          </Feed.Date>\n        </Feed.Summary>\n        <p className=\"user__address\" aria-label={email}>\n          {`email: ${email}`}\n        </p>\n        <p className=\"user__address\" aria-label={address.city}>\n          {`city: ${address.city}`}\n        </p>\n        <Feed.Meta>\n          <Feed.Like>\n            <Icon name=\"like\" />\n            {`${generateNumber()} Likes`}\n          </Feed.Like>\n        </Feed.Meta>\n      </Feed.Content>\n    </Feed.Event>\n  </Feed>\n);\n\nexport default User;\n","import React from 'react';\nimport { Comment } from 'semantic-ui-react';\nimport { getMessageDate } from './getMessageDate';\n\nconst CommentItem = ({ id, name, email, body }) => (\n  <>\n    <Comment className=\"comment\">\n      <Comment.Content>\n        <Comment.Author className=\"comment__title\" content={name} />\n        <Comment.Metadata>\n          {`comment was added on ${getMessageDate(id)}`}\n        </Comment.Metadata>\n        <Comment.Text className=\"comment__text\" content={body} />\n        <Comment.Metadata>\n          <Comment.Action content={email} />\n        </Comment.Metadata>\n      </Comment.Content>\n    </Comment>\n  </>\n);\n\nexport default CommentItem;\n","import React from 'react';\nimport { Comment, Header } from 'semantic-ui-react';\nimport CommentItem from './CommentItem';\n\nconst CommentList = ({ comments }) => (\n  <Comment.Group>\n    <Header as=\"h3\" dividing content=\"Comments\" />\n    {comments.map(comment => <CommentItem key={comment.id} {...comment} />)}\n  </Comment.Group>\n);\n\nexport default CommentList;\n","import React, { Fragment } from 'react';\nimport { Item, Segment } from 'semantic-ui-react';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ title, body, user, comments, highlightedText }) => {\n  const highlightText = (text) => {\n    if (!highlightedText) {\n      return text;\n    }\n\n    const parts = text.split(new RegExp(`(${highlightedText})`, 'gi'));\n\n    return parts.map((part, i) => (\n      <Fragment key={`${part + i}`}>\n        {part.toLowerCase() === highlightedText.toLowerCase()\n          ? <span className=\"highlighted-text\">{part}</span>\n          : part}\n      </Fragment>\n    ));\n  };\n\n  return (\n    <Segment raised color=\"blue\" className=\"post\">\n      <Item.Group>\n        <Item>\n          <Item.Image\n            size=\"tiny\"\n            src={user.photo || 'img/noavatar.png'}\n          />\n          <Item.Content>\n            <Item.Header\n              as=\"h2\"\n              title={title}\n              className=\"post__title\"\n              content={highlightText(title)}\n            />\n            <Item.Meta>\n              <User {...user} cmtsId={comments[comments.length - 1].id} />\n            </Item.Meta>\n            <Item.Description\n              className=\"post__text\"\n              content={highlightText(body)}\n            />\n            <Item.Extra>\n              <CommentList comments={comments} />\n            </Item.Extra>\n          </Item.Content>\n        </Item>\n      </Item.Group>\n    </Segment>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\nconst PostList = ({ list, highlightSearch }) => (\n  list.map(\n    post => <Post {...post} key={post.id} highlightedText={highlightSearch} />,\n  )\n);\n\nexport default PostList;\n","import React from 'react';\nimport { Icon, Input } from 'semantic-ui-react';\nimport { debounce } from '../helpers/debounce';\n\ntype PropsSearch = {\n  setSearchQuery: (query: string) => void;\n};\n\nconst Search: React.FC<PropsSearch> = ({ setSearchQuery }) => {\n  const debouncedSearch = debounce(\n    (value: string) => setSearchQuery(value), 1000,\n  );\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value.toLowerCase().slice(0, 30);\n\n    debouncedSearch(value);\n  };\n\n  return (\n    <div className=\"field\">\n      <Input\n        className=\"field__search\"\n        placeholder=\"Search...\"\n        size=\"big\"\n        icon\n      >\n        <input onChange={event => handleInputChange(event)} />\n        <Icon name=\"search\" />\n      </Input>\n    </div>\n  );\n};\n\nexport default Search;\n","export const debounce = (f, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(f, delay, ...args);\n  };\n};\n","const API_URL = 'https://seialek.github.io/react_dynamic-list-of-posts/api';\n\nconst getData = async (url: string) => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPosts = async (): Promise<Post[]> => {\n  const [posts, users, comments] = await Promise.all([\n    getData(`${API_URL}/posts.json`),\n    getData(`${API_URL}/users.json`),\n    getData(`${API_URL}/comments.json`),\n  ]);\n\n  return posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments\n      .filter((comment: Comment) => comment.postId === post.id),\n  }));\n};\n","import React, { useState } from 'react';\nimport { Button, Container, Header } from 'semantic-ui-react';\nimport PostList from './components/PostList';\nimport Search from './components/Search';\nimport { getPosts } from './api/getPosts';\nimport './App.css';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const loadData = async () => {\n    setLoading(true);\n\n    try {\n      const data = await getPosts();\n\n      setPosts(data);\n      setLoading(false);\n      setLoaded(true);\n    } catch (error) {\n      setLoading(false);\n      setError(`Something went wrong! ${error.message}`);\n    }\n  };\n\n  // const debouncedSearch = debounce(value => setCombinedMovies(\n  //   moviesFromServer.filter(\n  //     ({ title, description }) => (title + description)\n  //       .toLowerCase().includes(value),\n  //   ),\n  // ), 1000);\n\n  const searchPosts = () => {\n    if (!searchQuery) {\n      return posts;\n    }\n\n    return posts.filter(({ title, body }) => (`${title} ${body}`)\n      .toLowerCase()\n      .includes(searchQuery));\n  };\n\n  const searchedPosts = searchPosts();\n\n  return (\n    <Container className=\"page\">\n      <Header as=\"h1\" className=\"page__title\" color=\"blue\">\n        Dynamic list of posts\n      </Header>\n      {isLoaded ? (\n        <>\n          <Search setSearchQuery={setSearchQuery} />\n          <PostList\n            list={searchedPosts}\n            highlightSearch={searchQuery}\n          />\n        </>\n      ) : (\n        <>\n          <Header as=\"h2\" color=\"red\">{isError}</Header>\n          <Button\n            className=\"page__btn\"\n            loading={isLoading}\n            content=\"Load TodoList\"\n            color=\"blue\"\n            size=\"big\"\n            onClick={loadData}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}